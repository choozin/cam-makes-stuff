import Head from "next/head";

import dynamic from "next/dynamic";
import { useRouter } from "next/router";
import { useState, useEffect, useContext } from "react";

import { MenuProvider, MenuContext } from "../../contexts/MenuContext";
import { GeneralProvider } from "../../contexts/generalContext";

import Logo from "../Logo/Logo";
import Guide from "../AlienGuide/Guide";

import ShuttleLaunch from "../../components/PlanetMenu/SelectionPresentations/ShuttleLaunch";
import ExamplesMenu from "../../components/Examples/Menu";
import KnowledgeTree from "../KnowledgeTree/KnowledgeTree";

import "@fontsource/rubik-gemstones";
import "@fontsource/rubik-dirt";
import "@fontsource/permanent-marker";
import "@fontsource/shadows-into-light";
import "@fontsource/special-elite";
import "@fontsource/aldrich";
import "@fontsource/marcellus-sc";
import "@fontsource/gugi";
import "@fontsource/monofett";
import "@fontsource/im-fell-dw-pica-sc";
import "@fontsource/silkscreen";
import "@fontsource/codystar";
import "@fontsource/odibee-sans";
import "@fontsource/covered-by-your-grace";
import "@fontsource/orbitron";
import "@fontsource/roboto";
import "@fontsource/manrope";
import "@fontsource/maven-pro";
import "@fontsource/bakbak-one";
import "@fontsource/great-vibes";

const DynamicPlanetMenu = dynamic(
    () => import("../PlanetMenu/PlanetMenu"),
    {
        loading: () => "Loading...",
    }
);

const DynamicStarrySky = dynamic(
    () => import("../Starfield/StarrySky"),
    {
        loading: () => "Loading...",
    }
);

export default function Home() {

    const [isLogoCentered, setIsLogoCentered] = useState(true);
    
    const { selectedExampleMenu, setSelectedExampleMenu } = useContext(MenuContext);

    const [selectedPlanet, setSelectedPlanet] = useState("None");

    const [isExampleMenuVisible, setIsExampleMenuVisible] = useState("hidden");
    const [isIntroductionOpen, setIsIntroductionOpen] = useState(false);
    const [isKnowledgeTreeOpen, setIsKnowledgeTreeOpen] = useState(false);

    const [starsGeneratedAlready, setStarsGeneratedAlready] = useState(false);

    const router = useRouter();

    const updateURL = (path) => {
        router.push(`/${path}`);
    }

    const closeAllOverlayComponents = ({ exemptedPathsArray = [] } = {}) => {
        if (typeof exepmtedPathsArray === 'string') {
            exemptedPathsArray = [exemptedPathsArray];
        }

        setIsLogoCentered(false)
        //setIsOverlay1Visible(exemptedPathsArray.includes('overlay1'));

    }


    useEffect(() => {
        const path = router.asPath.split('/')[1]; // Get the path after the first slash
        const subPath = router.asPath.split('/')[2];
        const subSubPath = router.asPath.split('/')[3];

        switch (path) {
            case 'skills':
                closeAllOverlayComponents(['skills']);
                setIsKnowledgeTreeOpen(true) // MIGHT CAUSE DOUBLE RENDER?
                break;
            case 'examples':
                closeAllOverlayComponents(['examples']);
                setSelectedExampleMenu(true)
                setIsExampleMenuVisible(true);
                break;
            case 'tree':
                closeAllOverlayComponents(['examples']);
                setIsKnowledgeTreeOpen(true);
                break;
            default:
                closeAllOverlayComponents();
                break;
        }
    }, [router]);

    const checkForSpecialComponent = (title) => {

        title === "Introduction"
            ? setIsIntroductionOpen(true) && alert('Introduction is open.')
            : setIsIntroductionOpen(false);

        title === "Cam's Skill Tree"
            ? setIsKnowledgeTreeOpen(true)
            : setIsKnowledgeTreeOpen(false)

        return title === "Introduction" || title === "Cam's Skill Tree" || title === "Society - the Boardgame" ? true : false;
    };

    return (
                <div
                    style={{
                        width: "100vw",
                        height: "100vh",
                        backgroundColor: "#001",
                    }}
                >
                    <Head>
                        <title>Cam Makes Stuff</title>
                        <meta name="description" content="Generated by create next app" />
                        <link rel="icon" href="/favicon.ico" />
                    </Head>

                    <Guide term={null} />
                    <DynamicPlanetMenu
                        selectedPlanet={selectedPlanet}
                        setSelectedPlanet={setSelectedPlanet}
                        isExampleMenuVisible={isExampleMenuVisible}
                        setIsExampleMenuVisible={setIsExampleMenuVisible}
                        isIntroductionOpen={isIntroductionOpen}
                        setIsIntroductionOpen={setIsIntroductionOpen}
                        isKnowledgeTreeOpen={isKnowledgeTreeOpen}
                        setIsKnowledgeTreeOpen={() => setIsKnowledgeTreeOpen()}
                        starsGeneratedAlready={starsGeneratedAlready}
                        setStarsGeneratedAlready={() => setStarsGeneratedAlready()}
                        checkForSpecialComponent={checkForSpecialComponent}
                    />
                    <div style={{ width: '150px', height: '20px', position: 'absolute', zIndex: '100', top: 0, right: 0, backgroundColor: 'red', color: 'white' }}>
                        ex menu vis?: {isExampleMenuVisible ? 'true' : 'false'}
                    </div>
                    <div style={{ width: '150px', height: '20px', position: 'absolute', zIndex: '100', top: 20, right: 0, backgroundColor: 'red', color: 'white' }}>
                        selExMenu?: {selectedExampleMenu ? 'true' : 'false'}
                    </div>
                </div>
    );

    return null
}
